{"version":3,"sources":["App.module.scss","Components/BalancePanel.module.scss","Components/Panel.jsx","Components/Globals.js","Components/BalancePanel.jsx","Components/TradeOverviewPanel.jsx","Components/TradeDetailPanel.jsx","Pages/BalancePage.jsx","App.jsx","index.js","Components/TradeOverviewPanel.module.scss","Components/TradeDetailPanel.module.scss"],"names":["module","exports","Panel","props","style","Object","assign","display","flexDirection","backgroundColor","border","borderRadius","padding","alignItems","children","Globals","num","precision","Math","round","Number","EPSILON","pow","val","undefined","rgb1","rgb2","pct","r","g","b","obj","JSON","parse","stringify","ms","pad","n","sec","floor","mins","hrs","days","months","years","formatted","BalancePanel","api","balance","closed","open","profit","pieData","currencyData","balanceTotal","balanceStake","currencies","sort","a","est_stake","singular_count","filter","elem","total","length","forEach","index","color","GetPartialGradient","push","value","stake","className","styles","pie_container","startAngle","lineWidth","data","position","top","left","transform","fontSize","lineHeight","toFixed","list_container","map","justifyContent","flexGrow","currency","Round","CreateTrade","timesince","Date","now","close_timestamp","open_timestamp","min","hr","day","week","month","year","time_formatted","TradeOverviewPanel","balanceData","tradesData","bal","profit_all_coin","_yAxisDomain","x","y","profit_abs","reverse","ceil","graph","LineChart","width","height","margin","right","bottom","CartesianGrid","stroke","Line","type","dataKey","strokeWidth","isAnimationActive","dot","YAxis","orientation","tickCount","domain","scale","allowDecimals","XAxis","tickFormatter","dayjs","format","Tooltip","contentStyle","borderColor","allowEscapeViewBox","formatter","name","labelFormatter","list_header","onClick","event","setCurrentTrade","trade_id","is_open","pair","amount","GetPosNegColor","profit_pct","TradeDetailPanel","React","useState","openRefDot","closeRefDot","info_points","tradeData","setTradeData","useEffect","ShowTrade","trade","fetch","replace","req","json","res","parseFloat","open_rate","close_rate","split","Duration","max_rate","min_rate","currentTrade","close_button","ReferenceDot","fill","info_container","label","font","BalancePage","gridTemplateColumns","gridTemplateRows","columnGap","gridTemplateAreas","gridArea","clone","zIndex","visibility","selectorindex","App","instances","setApi","UpdateUI","update","Visibility","every","stop","console","log","outer_container","exact","to","page_container","options","onChange","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0ed192d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"App_root__ByUv-\",\"outer_container\":\"App_outer_container__pDP0V\",\"page_container\":\"App_page_container__2LHbY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pie_container\":\"BalancePanel_pie_container__QuEqC\",\"list_container\":\"BalancePanel_list_container__3VtFC\"};","import React from \"react\";\r\n\r\nexport const Panel = (props) => {\r\n   return (\r\n      <div style={Object.assign({\r\n         display: \"flex\",\r\n         flexDirection: \"column\",\r\n         backgroundColor: \"#191919\",\r\n         border: \"1px solid #2a2a2a\",\r\n         borderRadius: 15,\r\n         padding: 10,\r\n         alignItems: \"center\"\r\n      }, props.style)}>\r\n         {props.children}\r\n      </div>\r\n   );\r\n};","export default class Globals {\r\n   static Round(num, precision) {\r\n      return Math.round((num + Number.EPSILON) * Math.pow(10, precision)) / Math.pow(10, precision);\r\n   }\r\n\r\n   static GetPosNegColor(val) {\r\n      return val > 0 ? \"#3d3\" : val < 0 ? \"#f55\" : undefined;\r\n   }\r\n\r\n   static GetPartialGradient(rgb1, rgb2, pct) {\r\n      return {\r\n         r: Math.round(rgb1.r + (rgb2.r - rgb1.r) * pct),\r\n         g: Math.round(rgb1.g + (rgb2.g - rgb1.g) * pct),\r\n         b: Math.round(rgb1.b + (rgb2.b - rgb1.b) * pct),\r\n      }\r\n   }\r\n\r\n   static clone(obj) {\r\n      return JSON.parse(JSON.stringify(obj));\r\n   }\r\n\r\n   static Duration(ms) {\r\n      function pad(n) {\r\n         return n >= 10 ? n : `0${n}`\r\n      }\r\n      let sec = Math.floor(ms / 1000 % 60);\r\n      let mins = Math.floor(ms / 1000 / 60 % 60);\r\n      let hrs = Math.floor(ms / 1000 / 60 / 60 % 24);\r\n      let days = Math.floor(ms / 1000 / 60 / 60 / 24 % (365 / 12));\r\n      let months = Math.floor(ms / 1000 / 60 / 60 / 24 / (365 / 12) % 12);\r\n      let years = Math.floor(ms / 1000 / 60 / 60 / 24 / 365);\r\n      \r\n      let formatted = \"\";\r\n      if (years > 0)\r\n         formatted = `${years}y${months > 0 ? pad(months) + \"m\" : \"\"}`;\r\n      else if (months > 0)\r\n         formatted = `${months}m${days > 0 ? pad(days) + \"d\" : \"\"}`;\r\n      else if (days > 0)\r\n         formatted = `${days}d${hrs > 0 ? pad(hrs) + \"h\" : \"\"}`;\r\n      else if (hrs > 0)\r\n         formatted = `${hrs}h${mins > 0 ? pad(mins) + \"m\" : \"\"}`;\r\n      else if (mins > 0)\r\n         formatted = `${mins}m${sec > 0 ? pad(sec) + \"s\" : \"\"}`;\r\n      else if (sec > 0)\r\n         formatted = `${sec}s`;\r\n      \r\n      return formatted;\r\n   }\r\n}","import React from \"react\";\r\nimport { PieChart } from \"react-minimal-pie-chart\";\r\nimport { Panel } from \"./Panel\";\r\nimport Globals from \"./Globals\";\r\nimport styles from \"./BalancePanel.module.scss\";\r\n\r\nexport const BalancePanel = (props) => {\r\n   const {balance, closed, open, profit} = props.api;\r\n\r\n   let pieData = [];\r\n   let currencyData = [];\r\n   let balanceTotal = 0;\r\n   let balanceStake = \"\";\r\n   if (balance && closed && open && profit) {\r\n      balance.currencies.sort(function(a, b) {\r\n         if (a.est_stake < b.est_stake) return 1;\r\n         if (a.est_stake > b.est_stake) return -1;\r\n         return 0;\r\n      });\r\n\r\n      let singular_count = balance.currencies.filter(elem => elem.est_stake > (balance.total * 0.01)).length;\r\n\r\n      balance.currencies.forEach((elem, index) => {\r\n         if (index < singular_count) {\r\n            let pct = index / singular_count;\r\n            let color = Globals.GetPartialGradient({r: 66, g: 194, b: 244}, {r: 134, g: 65, b: 244}, pct);\r\n            pieData.push({\r\n               value: elem.est_stake,\r\n               color: `rgb(${color.r}, ${color.g}, ${color.b})`\r\n            });\r\n         }else{\r\n            if (index === singular_count) {\r\n               pieData.push({\r\n                  value: elem.est_stake,\r\n                  color: \"#EAECEF\"\r\n               });\r\n            }else{\r\n               pieData[singular_count - 1].value += elem.est_stake;\r\n            }\r\n         }\r\n      });\r\n      currencyData = balance.currencies;\r\n      balanceTotal = balance.total;\r\n      balanceStake = balance.stake;\r\n   }\r\n\r\n   return (\r\n      <Panel style={props.style}>\r\n         <div className={styles.pie_container}>\r\n            <PieChart\r\n               startAngle={-90}\r\n               lineWidth={20}\r\n               data={pieData}/>\r\n            <div className=\"center_info_container\">\r\n               <span style={{position: \"absolute\", top: \"calc(50% - 30px)\", left: \"50%\", transform: \"translateX(-50%) translateY(-50%)\"}} className=\"secondary\">Total balance</span>\r\n               <span style={{fontSize: 40, lineHeight: 1}}>{balanceTotal.toFixed(2)}</span>\r\n               <span style={{position: \"absolute\", top: \"calc(50% + 28px)\", left: \"50%\", transform: \"translateX(-50%) translateY(-50%)\"}} className=\"secondary\">{balanceStake}</span>\r\n            </div>\r\n         </div>\r\n         <div className={styles.list_container}>\r\n            {currencyData.map((elem, index) => {\r\n               return (\r\n                  <div className=\"entry\" key={elem.currency}>\r\n                     <div className=\"color\" style={{backgroundColor: index < pieData.length ? pieData[index].color : \"#EAECEF\"}}/>\r\n                     <div style={{display: \"flex\", justifyContent: \"space-between\", flexGrow: 1}}>\r\n                        <span>{elem.currency}</span>\r\n                        <span>{Globals.Round(elem.balance, 4)}</span>\r\n                     </div>\r\n                  </div>\r\n               )\r\n            })}\r\n         </div>\r\n      </Panel>\r\n   );\r\n};","import React from \"react\";\r\nimport { Panel } from \"./Panel\";\r\nimport { LineChart, Line, CartesianGrid, YAxis, XAxis, Tooltip } from \"recharts\";\r\nimport Globals from \"./Globals\";\r\nimport styles from \"./TradeOverviewPanel.module.scss\";\r\nimport dayjs from \"dayjs\";\r\n\r\nfunction CreateTrade(elem) {\r\n   let timesince = Date.now() - (elem.close_timestamp ?? elem.open_timestamp);\r\n   let sec = Math.floor(timesince / 1000);\r\n   let min = Math.floor(sec / 60);\r\n   let hr = Math.floor(min / 60);\r\n   let day = Math.floor(hr / 24);\r\n   let week = Math.floor(day / 7);\r\n   let month = Math.floor(day / (365 / 12));\r\n   let year = Math.floor(day / 365);\r\n\r\n   let formatted = \"\";\r\n   if (year >= 1)\r\n      formatted = `${year}y`;\r\n   else if (month >= 1)\r\n      formatted = `${month}mo`;\r\n   else if (week >= 1)\r\n      formatted = `${week}w`;\r\n   else if (day >= 1)\r\n      formatted = `${day}d`;\r\n   else if (hr >= 1)\r\n      formatted = `${hr}h`;\r\n   else if (min >= 1)\r\n      formatted = `${min}m`;\r\n   else if (sec >= 1)\r\n      formatted = `${sec}s`;\r\n\r\n   return Object.assign({time_formatted: formatted}, elem);\r\n}\r\n\r\nexport const TradeOverviewPanel = (props) => {\r\n   const {balance, closed, open, profit} = props.api;\r\n\r\n   let balanceData = [];\r\n   let tradesData = [];\r\n   let balanceStake = \"\";\r\n   if (balance && closed && open && profit) {\r\n      let bal = balance.total - profit.profit_all_coin;\r\n      let _yAxisDomain = [bal, bal];\r\n      closed.sort(function(a, b) {\r\n         if (a.close_timestamp > b.close_timestamp) return 1;\r\n         if (a.close_timestamp < b.close_timestamp) return -1;\r\n         return 0;\r\n      });\r\n      open.sort(function(a, b) {\r\n         if (a.open_timestamp < b.open_timestamp) return 1;\r\n         if (a.open_timestamp > b.open_timestamp) return -1;\r\n         return 0;\r\n      });\r\n      \r\n      balanceData.push({\r\n         x: closed[0].open_timestamp,\r\n         y: bal\r\n      });\r\n\r\n      closed.forEach((elem, index) => {\r\n         bal += elem.profit_abs;\r\n         balanceData.push({\r\n            x: elem.close_timestamp,\r\n            y: bal\r\n         });\r\n         if (bal < _yAxisDomain[0]) _yAxisDomain[0] = bal;\r\n         if (bal > _yAxisDomain[1]) _yAxisDomain[1] = bal;\r\n      });\r\n\r\n      if (open.length > 0) {\r\n         open.forEach(elem => {\r\n            bal += elem.profit_abs;\r\n         });\r\n         balanceData.push({\r\n            x: Date.now(),\r\n            y: bal\r\n         });\r\n         if (bal < _yAxisDomain[0]) _yAxisDomain[0] = bal;\r\n         if (bal > _yAxisDomain[1]) _yAxisDomain[1] = bal;\r\n      }\r\n\r\n      open.forEach(elem => tradesData.push(CreateTrade(elem)));\r\n      closed.reverse().forEach(elem => tradesData.push(CreateTrade(elem)));\r\n\r\n      _yAxisDomain[0] = Math.ceil(_yAxisDomain[0]);\r\n      _yAxisDomain[1] = Math.ceil(_yAxisDomain[1]);\r\n\r\n      balanceStake = balance.stake;\r\n   }\r\n\r\n   return (\r\n      <Panel style={props.style}>\r\n         <div className={styles.graph}>\r\n            <LineChart width={578} height={250} data={balanceData} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\r\n               <CartesianGrid stroke=\"#2a2a2a\"/>\r\n               <Line\r\n                  type=\"monotone\"\r\n                  dataKey=\"y\"\r\n                  stroke=\"#42c2f4\"\r\n                  strokeWidth={2}\r\n                  isAnimationActive={false}\r\n                  dot={false}/>\r\n               <YAxis\r\n                  orientation=\"right\"\r\n                  tickCount={10}\r\n                  domain={[\"dataMin\", \"dataMax\"]}\r\n                  scale=\"linear\"\r\n                  allowDecimals={false}/>\r\n               <XAxis\r\n                  dataKey=\"x\"\r\n                  scale=\"time\"\r\n                  tickFormatter={(value) => dayjs(value).format(\"D MMM\")}/>\r\n               <Tooltip\r\n                  contentStyle={{backgroundColor: \"#2a2a2a\", borderColor: \"#2f2f2f\"}}\r\n                  allowEscapeViewBox={{x: true, y: true}}\r\n                  formatter={(value, name, props) => [value.toFixed(2), \"Balance\"]}\r\n                  labelFormatter={(value) => dayjs(value).format(\"D MMM\")}/>\r\n            </LineChart>\r\n         </div>\r\n         <div className={styles.list_header}>\r\n            <span>Pair</span>\r\n            <span>Amount</span>\r\n            <span>Profit (pct)</span>\r\n            <span>Profit ({balanceStake})</span>\r\n            <span>Time</span>\r\n         </div>\r\n         <div className={styles.list_container}>\r\n            {tradesData.map(elem => {\r\n               return (\r\n                  <div className=\"entry\" key={elem.trade_id} onClick={(event) => props.setCurrentTrade(elem.trade_id)}>\r\n                     <span style={{color: elem.is_open ? \"#3d3\" : undefined}}>{elem.pair}</span>\r\n                     <span>{Globals.Round(elem.amount, 2)}</span>\r\n                     <span style={{color: Globals.GetPosNegColor(elem.profit_pct)}}>{elem.profit_pct > 0 ? \"+\" : \"\"}{elem.profit_pct.toFixed(2)}%</span>\r\n                     <span style={{color: Globals.GetPosNegColor(elem.profit_abs)}}>{elem.profit_abs > 0 ? \"+\" : \"\"}{elem.profit_abs.toFixed(2)}</span>\r\n                     <span>{elem.time_formatted}</span>\r\n                  </div>\r\n               )\r\n            })}\r\n         </div>\r\n      </Panel>\r\n   );\r\n};","import React from \"react\";\r\nimport { Panel } from \"./Panel\";\r\nimport { LineChart, Line, CartesianGrid, YAxis, XAxis, Tooltip, ReferenceDot } from \"recharts\";\r\nimport Globals from \"./Globals\";\r\nimport styles from \"./TradeDetailPanel.module.scss\";\r\nimport Visibility from \"visibilityjs\";\r\nimport dayjs from \"dayjs\";\r\n\r\nconst months = [\"Jan\", \"Feb\", \"March\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\nexport const TradeDetailPanel = (props) => {\r\n   let [tradeData, setTradeData] = React.useState({\r\n      graph: [],\r\n      openRefDot: null,\r\n      closeRefDot: null,\r\n      info_points: []\r\n   });\r\n   \r\n   // React.useEffect(() => {\r\n   //    setTradeData({\r\n   //       graph: [],\r\n   //       openRefDot: null,\r\n   //       closeRefDot: null\r\n   //    });\r\n   //    let ShowTrade = async (trade) => {\r\n   //       let req = await fetch(\r\n   //          `https://api.binance.com/api/v3/klines?symbol=${trade.pair.replace(\"/\", \"\")}` +\r\n   //          `&interval=5m` +\r\n   //          `&startTime=${trade.open_timestamp - 20 * 1000 * 60 * 60}` +\r\n   //          `&endTime=${(trade.close_timestamp ?? Date.now()) + 20 * 1000 * 60 * 60}` +\r\n   //          `&limit=1000`\r\n   //       );\r\n\r\n   //       let res = await req.json();\r\n\r\n   //       setTradeData({\r\n   //          graph: res.map(elem => {return {x: elem[6], y: Number.parseFloat(elem[4])}}),\r\n   //          openRefDot: {x: trade.open_timestamp, y: trade.open_rate},\r\n   //          closeRefDot: !trade.is_open ? {x: trade.close_timestamp, y: trade.close_rate} : null,\r\n   //          info_points: [\r\n   //             {\r\n   //                \"label\": `CRYPTOCURRENCY`,\r\n   //                \"value\": trade.pair.split(\"/\")[0],\r\n   //             },\r\n   //             {\r\n   //                \"label\": `PROFIT (PCT)`,\r\n   //                \"value\": `${trade.profit_pct > 0 ? \"+\" : \"\"}${trade.profit_pct.toFixed(2)}%`,\r\n   //                \"color\": Globals.GetPosNegColor(trade.profit_pct)\r\n   //             },\r\n   //             {\r\n   //                \"label\": `PROFIT (${trade.pair.split(\"/\")[1]})`,\r\n   //                \"value\": `${trade.profit_abs > 0 ? \"+\" : \"\"}${trade.profit_abs.toFixed(2)}`,\r\n   //                \"color\": Globals.GetPosNegColor(trade.profit_abs)\r\n   //             },\r\n   //             {\r\n   //                \"label\": `OPEN`,\r\n   //                \"value\": `${dayjs(trade.open_timestamp).format(\"MM/DD/YYYY HH:mm\")}`,// ${dayjs(trade.open_timestamp).format(\"HH:mm\")}`,\r\n   //                \"font\": 24\r\n   //             },\r\n   //             {\r\n   //                \"label\": `DURATION`,\r\n   //                \"value\": Globals.Duration((trade.close_timestamp ?? Date.now()) - trade.open_timestamp)\r\n   //             },\r\n   //             {\r\n   //                \"label\": `CLOSE`,\r\n   //                \"value\": trade.is_open ? \"OPEN\" : `${dayjs(trade.close_timestamp).format(\"MM/DD/YYYY HH:mm\")}`,// ${dayjs(trade.close_timestamp).format(\"HH:mm\")}`,\r\n   //                \"font\": 24\r\n   //             },\r\n   //             {\r\n   //                \"label\": `HIGH`,\r\n   //                \"value\": trade.max_rate.toFixed(6),\r\n   //             },\r\n   //             {\r\n   //                \"label\": `LOW`,\r\n   //                \"value\": trade.min_rate.toFixed(6),\r\n   //             },\r\n   //             {\r\n   //                \"label\": `AMOUNT`,\r\n   //                \"value\": Globals.Round(trade.amount, 2),\r\n   //             },\r\n   //          ]\r\n   //       });\r\n   //    };\r\n   //    let update;\r\n   //    if (props.currentTrade) {\r\n   //       update = Visibility.every(5000, () => ShowTrade(props.currentTrade));\r\n   //       ShowTrade(props.currentTrade);\r\n   //    }else{\r\n   //       Visibility.stop(update);\r\n   //    }\r\n   //    return () => Visibility.stop(update);\r\n   // }, [props.currentTrade]);\r\n\r\n   // let tradeData = {\r\n   //    graph: [],\r\n   //    openRefDot: null,\r\n   //    closeRefDot: null,\r\n   //    info_points: []\r\n   // };\r\n\r\n   React.useEffect(() => {\r\n      let ShowTrade = async (trade) => {\r\n         let req = await fetch(\r\n            `https://api.binance.com/api/v3/klines?symbol=${trade.pair.replace(\"/\", \"\")}` +\r\n            `&interval=5m` +\r\n            `&startTime=${trade.open_timestamp - 20 * 1000 * 60 * 60}` +\r\n            `&endTime=${(trade.close_timestamp ?? Date.now()) + 20 * 1000 * 60 * 60}` +\r\n            `&limit=1000`\r\n         );\r\n\r\n         let res = await req.json();\r\n\r\n         setTradeData({\r\n            graph: res.map(elem => {return {x: elem[6], y: Number.parseFloat(elem[4])}}),\r\n            openRefDot: {x: trade.open_timestamp, y: trade.open_rate},\r\n            closeRefDot: !trade.is_open ? {x: trade.close_timestamp, y: trade.close_rate} : null,\r\n            info_points: [\r\n               {\r\n                  \"label\": `CRYPTOCURRENCY`,\r\n                  \"value\": trade.pair.split(\"/\")[0],\r\n               },\r\n               {\r\n                  \"label\": `PROFIT (PCT)`,\r\n                  \"value\": `${trade.profit_pct > 0 ? \"+\" : \"\"}${trade.profit_pct.toFixed(2)}%`,\r\n                  \"color\": Globals.GetPosNegColor(trade.profit_pct)\r\n               },\r\n               {\r\n                  \"label\": `PROFIT (${trade.pair.split(\"/\")[1]})`,\r\n                  \"value\": `${trade.profit_abs > 0 ? \"+\" : \"\"}${trade.profit_abs.toFixed(2)}`,\r\n                  \"color\": Globals.GetPosNegColor(trade.profit_abs)\r\n               },\r\n               {\r\n                  \"label\": `OPEN`,\r\n                  \"value\": `${dayjs(trade.open_timestamp).format(\"MM/DD/YYYY HH:mm\")}`,// ${dayjs(trade.open_timestamp).format(\"HH:mm\")}`,\r\n                  \"font\": 24\r\n               },\r\n               {\r\n                  \"label\": `DURATION`,\r\n                  \"value\": Globals.Duration((trade.close_timestamp ?? Date.now()) - trade.open_timestamp)\r\n               },\r\n               {\r\n                  \"label\": `CLOSE`,\r\n                  \"value\": trade.is_open ? \"OPEN\" : `${dayjs(trade.close_timestamp).format(\"MM/DD/YYYY HH:mm\")}`,// ${dayjs(trade.close_timestamp).format(\"HH:mm\")}`,\r\n                  \"font\": 24\r\n               },\r\n               {\r\n                  \"label\": `HIGH`,\r\n                  \"value\": Globals.Round(trade.max_rate, 6),\r\n               },\r\n               {\r\n                  \"label\": `LOW`,\r\n                  \"value\": Globals.Round(trade.min_rate, 6),\r\n               },\r\n               {\r\n                  \"label\": `AMOUNT`,\r\n                  \"value\": Globals.Round(trade.amount, 2),\r\n               },\r\n            ]\r\n         });\r\n      };\r\n\r\n      if (props.currentTrade && props.api) {\r\n         let trade = props.api.closed.filter(elem => elem.trade_id == props.currentTrade);\r\n         if (trade.length > 0) trade = trade[0];\r\n         if (trade.length == 0) trade = props.api.open.filter(elem => elem.trade_id == props.currentTrade)[0];\r\n\r\n         if (trade && trade.length != 0) ShowTrade(trade);\r\n      }\r\n   }, [props.api, props.currentTrade]);\r\n\r\n   return (\r\n      <Panel style={Object.assign(props.style, {position: \"relative\"})}>\r\n         <div className={styles.close_button} onClick={event => props.setCurrentTrade(null)}/>\r\n         <div className={styles.graph}>\r\n            <LineChart width={578} height={250} data={tradeData.graph} margin={{ top: 5, right: 20, bottom: 5, left: 0 }}>\r\n               <CartesianGrid stroke=\"#2a2a2a\"/>\r\n               <Line\r\n                  type=\"monotone\"\r\n                  dataKey=\"y\"\r\n                  stroke=\"#42c2f4\"\r\n                  strokeWidth={2}\r\n                  isAnimationActive={false}\r\n                  dot={false}/>\r\n               <YAxis\r\n                  orientation=\"right\"\r\n                  tickCount={10}\r\n                  domain={[\"dataMin\", \"dataMax\"]}\r\n                  scale=\"linear\"/>\r\n               <XAxis\r\n                  dataKey=\"x\"\r\n                  scale=\"time\"\r\n                  tickFormatter={(value) => dayjs(value).format(\"HH:mm\")}/>\r\n               {tradeData.openRefDot && <ReferenceDot x={tradeData.openRefDot.x} y={tradeData.openRefDot.y} r={5} fill=\"#0f0\" stroke=\"none\"/>}\r\n               {tradeData.closeRefDot && <ReferenceDot x={tradeData.closeRefDot.x} y={tradeData.closeRefDot.y} r={5} fill=\"#f00\" stroke=\"none\"/>}\r\n               <Tooltip\r\n                  contentStyle={{backgroundColor: \"#2a2a2a\", borderColor: \"#2f2f2f\"}}\r\n                  allowEscapeViewBox={{x: true, y: true}}\r\n                  formatter={(value, name, props) => [value.toFixed(6), \"Close\"]}\r\n                  labelFormatter={(value) => dayjs(value).format(\"HH:mm\")}/>\r\n            </LineChart>\r\n         </div>\r\n         <div className={styles.info_container}>\r\n            {tradeData.info_points && tradeData.info_points.map((elem, index) => {\r\n               return (\r\n                  <div className=\"info\" key={index}>\r\n                     <span className=\"label\">{elem.label}</span>\r\n                     <div style={{display: \"flex\", height: \"100%\", justifyContent: \"center\", alignItems: \"center\"}}>\r\n                        <span className=\"value\" style={{color: elem.color, fontSize: elem.font}}>{elem.value}</span>\r\n                     </div>\r\n                  </div>\r\n               )\r\n            })}\r\n         </div>\r\n      </Panel>\r\n   );\r\n};","import React from \"react\";\r\nimport { BalancePanel } from \"../Components/BalancePanel\";\r\nimport { TradeOverviewPanel } from \"../Components/TradeOverviewPanel\";\r\nimport { TradeDetailPanel } from \"../Components/TradeDetailPanel\";\r\nimport Globals from \"../Components/Globals\";\r\n\r\nexport const BalancePage = (props) => {\r\n   return (\r\n      <div style={{\r\n         display: \"grid\",\r\n         gridTemplateColumns: \"350px 600px\",\r\n         gridTemplateRows: \"600px\",\r\n         columnGap: 30,\r\n         gridTemplateAreas: \"'bal trades'\"\r\n      }}>\r\n         <BalancePanel style={{gridArea: \"bal\"}} api={Globals.clone(props.api)}/>\r\n         <TradeOverviewPanel style={{gridArea: \"trades\"}} api={Globals.clone(props.api)} setCurrentTrade={props.setCurrentTrade}/>\r\n         <TradeDetailPanel\r\n            style={{\r\n               gridArea: \"trades\",\r\n               zIndex: 999,\r\n               visibility: props.currentTrade ? \"visible\" : \"hidden\"\r\n            }}\r\n            currentTrade={props.currentTrade}\r\n            setCurrentTrade={props.setCurrentTrade}\r\n            api={Globals.clone(props.api)}/>\r\n      </div>\r\n   )\r\n};","import React from \"react\";\nimport styles from  \"./App.module.scss\";\nimport { Route, NavLink, HashRouter } from \"react-router-dom\";\nimport { BalancePage } from \"./Pages/BalancePage\";\nimport { StatsPage } from \"./Pages/StatsPage\";\nimport Dropdown from \"react-dropdown\";\nimport \"react-dropdown/style.css\";\nimport Visibility from \"visibilityjs\";\nimport Globals from \"./Components/Globals\";\n\nlet selectorindex = 0;\n\nexport const App = (props) => {\n   const [currentTrade, setCurrentTrade] = React.useState(null);\n   const [api, setApi] = React.useState({\n      instances: [],\n      balance: false,\n      closed: false,\n      open: false,\n      profit: false\n   });\n\n   React.useEffect(() => {\n      UpdateUI();\n      let update = Visibility.every(1000, () => UpdateUI());\n\n      return () => Visibility.stop(update);\n\t}, []);\n\n   let UpdateUI = async () => {\n      try {\n         let req = await fetch(`/api/all?instance=${selectorindex}`);\n         let res = await req.json();\n\n         if (res) {\n            setApi({\n               instances: res.instances,\n               balance: res.balance,\n               closed: res.closed,\n               open: res.open,\n               profit: res.profit\n            });\n         }\n      }catch(err) {\n         console.log(err);\n      }\n   };\n\n   let onIndexSelectChange = (event) => {\n      setCurrentTrade(null);\n      selectorindex = event.value;\n      UpdateUI();\n   };\n\n   return (\n      <HashRouter>\n         <div className={styles.outer_container}>\n            <div className=\"menu\">\n               <NavLink className=\"menuitem wallet\" exact to=\"/\"/>\n               <NavLink className=\"menuitem stats\" to=\"/stats\"/>\n            </div>\n            <div className={styles.page_container}>\n               <div style={{\n                  display: \"grid\",\n                  gridTemplateRows: \"auto auto auto\",\n                  gridTemplateColumns: \"auto\",\n                  gridTemplateAreas: \"'header' 'instance' 'content'\"\n               }}>\n                  <div className=\"instance\">\n                     <div className=\"icon\"/>\n                     <Dropdown\n                        className=\"instance_select\"\n                        options={api.instances.map((elem, index) => {return {label: elem, value: index}})}\n                        onChange={onIndexSelectChange}\n                        value={api.instances[0] || \"\"}/>\n                  </div>\n                  <Route exact path=\"/\">\n                     <span className=\"header\">DASHBOARD</span>\n                     <BalancePage api={api} currentTrade={currentTrade} setCurrentTrade={setCurrentTrade}/>\n                  </Route>\n                  <Route exact path=\"/stats\">\n                     <span className=\"header\">STATISTICS</span>\n                  </Route>\n               </div>\n            </div>\n         </div>\n      </HashRouter>\n   );\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n   <React.StrictMode>\n      <App/>\n   </React.StrictMode>,\n   document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals","// extracted by mini-css-extract-plugin\nmodule.exports = {\"graph\":\"TradeOverviewPanel_graph__1TgzR\",\"list_header\":\"TradeOverviewPanel_list_header__8z2LL\",\"list_container\":\"TradeOverviewPanel_list_container__2dOap\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"close_button\":\"TradeDetailPanel_close_button__3WhMo\",\"graph\":\"TradeDetailPanel_graph__1Olzu\",\"info_container\":\"TradeDetailPanel_info_container__1kCjR\"};"],"sourceRoot":""}